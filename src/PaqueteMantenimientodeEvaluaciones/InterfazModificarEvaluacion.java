/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PaqueteMantenimientodeEvaluaciones;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FRANCISCO ZAVALA SILVA
 */
public class InterfazModificarEvaluacion extends javax.swing.JFrame {

    boolean materiaSeleccionada = false;
    boolean gradoSeleccionado = false;
    public int idUsuario;
    public String nombre;
    int totalReactivosSeleccionados = 0;
    int reactivosdeEvaluacion[] = new int[20];
    int totalTemas = 0;
    int renglon = 0;
    int columna = 0;
    String nombreEvaluacion = null;

    /**
     * Creates new form InterfazModificarEvaluacion
     */
    public InterfazModificarEvaluacion() {
        initComponents();

        //establece la posicion central de la interfaz
        this.setLocationRelativeTo(null);

        //coloca el icono en la interfaz
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/icono.png")).getImage());
        //desactiva la opcion de maximizar
        this.setResizable(false);
        //desactiva la opcion de cerrar
        setDefaultCloseOperation(0);
        //desactiva el boton guardar
        boton2Guardar.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jp1ModificarEvaluacion = new javax.swing.JPanel();
        boton4Salir = new javax.swing.JButton();
        boton1Consultar = new javax.swing.JButton();
        boton2Guardar = new javax.swing.JButton();
        jp2Evaluacion = new javax.swing.JPanel();
        lab5Materia = new javax.swing.JLabel();
        lab2Grado = new javax.swing.JLabel();
        lab3Evaluacion = new javax.swing.JLabel();
        cbox4Evaluacion = new javax.swing.JComboBox();
        cbox2Grado = new javax.swing.JComboBox();
        cbox1Materia = new javax.swing.JComboBox();
        lab1TotalReactivos = new javax.swing.JLabel();
        lab5PuntuacionTotal = new javax.swing.JLabel();
        jp3ReactivosEvaluacion = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1ReactivosEvaluacion = new javax.swing.JTable();
        boton5RemoverReactivo = new javax.swing.JButton();
        jp4Temas = new javax.swing.JPanel();
        lab4Tema = new javax.swing.JLabel();
        cbox3Tema = new javax.swing.JComboBox();
        jp5Reactivos = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table3ReactivosSeleccionados = new javax.swing.JTable();
        boton6Seleccionar = new javax.swing.JButton();
        boton7Cancelar = new javax.swing.JButton();
        menu1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mantenimiento de evaluaciones/Modificar Evaluación");
        setMinimumSize(new java.awt.Dimension(1056, 450));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                personalizarInterfaz(evt);
            }
        });

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane4.setMaximumSize(new java.awt.Dimension(800, 672));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(800, 672));

        jp1ModificarEvaluacion.setBackground(new java.awt.Color(245, 245, 239));
        jp1ModificarEvaluacion.setMaximumSize(new java.awt.Dimension(1056, 672));
        jp1ModificarEvaluacion.setMinimumSize(new java.awt.Dimension(1056, 672));
        jp1ModificarEvaluacion.setName(""); // NOI18N

        boton4Salir.setBackground(new java.awt.Color(255, 255, 255));
        boton4Salir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton4Salir.setText("Salir");
        boton4Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir(evt);
            }
        });

        boton1Consultar.setBackground(new java.awt.Color(255, 255, 0));
        boton1Consultar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton1Consultar.setText("Consultar");
        boton1Consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultar(evt);
            }
        });

        boton2Guardar.setBackground(new java.awt.Color(51, 204, 0));
        boton2Guardar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton2Guardar.setText("Guardar");
        boton2Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar(evt);
            }
        });

        jp2Evaluacion.setBackground(new java.awt.Color(253, 251, 251));
        jp2Evaluacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Información de la evaluación"));

        lab5Materia.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab5Materia.setText("Materia:");

        lab2Grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab2Grado.setText("Grado:");

        lab3Evaluacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab3Evaluacion.setText("Evaluación:");

        cbox4Evaluacion.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbox4Evaluacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una opción" }));

        cbox2Grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbox2Grado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una opción" }));
        cbox2Grado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                buscarGrados(evt);
            }
        });
        cbox2Grado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradogradoSeleccionado(evt);
            }
        });

        cbox1Materia.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbox1Materia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una opción" }));
        cbox1Materia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                buscarMaterias(evt);
            }
        });
        cbox1Materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materiaSeleccionada(evt);
            }
        });

        lab1TotalReactivos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab1TotalReactivos.setText("Reactivos seleccionados: #0");

        lab5PuntuacionTotal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab5PuntuacionTotal.setText("Puntuacion total: #0");

        javax.swing.GroupLayout jp2EvaluacionLayout = new javax.swing.GroupLayout(jp2Evaluacion);
        jp2Evaluacion.setLayout(jp2EvaluacionLayout);
        jp2EvaluacionLayout.setHorizontalGroup(
            jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp2EvaluacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab5Materia)
                    .addComponent(lab2Grado)
                    .addComponent(lab3Evaluacion))
                .addGap(18, 18, 18)
                .addGroup(jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp2EvaluacionLayout.createSequentialGroup()
                        .addComponent(cbox4Evaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(281, Short.MAX_VALUE))
                    .addGroup(jp2EvaluacionLayout.createSequentialGroup()
                        .addGroup(jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbox1Materia, 0, 174, Short.MAX_VALUE)
                            .addComponent(cbox2Grado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lab1TotalReactivos)
                            .addComponent(lab5PuntuacionTotal)))))
        );
        jp2EvaluacionLayout.setVerticalGroup(
            jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp2EvaluacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab5Materia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbox1Materia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab2Grado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbox2Grado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp2EvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab3Evaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbox4Evaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(jp2EvaluacionLayout.createSequentialGroup()
                .addComponent(lab1TotalReactivos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lab5PuntuacionTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jp3ReactivosEvaluacion.setBackground(new java.awt.Color(253, 251, 251));
        jp3ReactivosEvaluacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Reactivos de la evaluación"));

        table1ReactivosEvaluacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de lista", "Descripción del reactivo", "Respuesta correcta", "Respuesta Incorrecta 1", "Respuesta Incorrecta 2", "Puntaje", "Check"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table1ReactivosEvaluacion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                calcularPuntuacion(evt);
            }
        });
        jScrollPane1.setViewportView(table1ReactivosEvaluacion);

        boton5RemoverReactivo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton5RemoverReactivo.setText("Remover reactivo");
        boton5RemoverReactivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerReactivo(evt);
            }
        });

        javax.swing.GroupLayout jp3ReactivosEvaluacionLayout = new javax.swing.GroupLayout(jp3ReactivosEvaluacion);
        jp3ReactivosEvaluacion.setLayout(jp3ReactivosEvaluacionLayout);
        jp3ReactivosEvaluacionLayout.setHorizontalGroup(
            jp3ReactivosEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp3ReactivosEvaluacionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boton5RemoverReactivo)
                .addContainerGap())
            .addGroup(jp3ReactivosEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jp3ReactivosEvaluacionLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jp3ReactivosEvaluacionLayout.setVerticalGroup(
            jp3ReactivosEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp3ReactivosEvaluacionLayout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addComponent(boton5RemoverReactivo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jp3ReactivosEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jp3ReactivosEvaluacionLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(41, Short.MAX_VALUE)))
        );

        jp4Temas.setBackground(new java.awt.Color(253, 251, 251));
        jp4Temas.setBorder(javax.swing.BorderFactory.createTitledBorder("Temas de la evaluación"));

        lab4Tema.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab4Tema.setText("Tema:");

        cbox3Tema.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbox3Tema.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una opción" }));
        cbox3Tema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarTemas(evt);
            }
        });

        javax.swing.GroupLayout jp4TemasLayout = new javax.swing.GroupLayout(jp4Temas);
        jp4Temas.setLayout(jp4TemasLayout);
        jp4TemasLayout.setHorizontalGroup(
            jp4TemasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp4TemasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lab4Tema)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbox3Tema, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(36, 36, 36))
        );
        jp4TemasLayout.setVerticalGroup(
            jp4TemasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp4TemasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp4TemasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab4Tema, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbox3Tema, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jp5Reactivos.setBackground(new java.awt.Color(253, 251, 251));
        jp5Reactivos.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione los reactivos"));

        table3ReactivosSeleccionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de lista", "Descripción del reactivo", "Respuesta correcta", "Respuesta Incorrecta 1", "Respuesta Incorrecta 2", "Check"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(table3ReactivosSeleccionados);

        boton6Seleccionar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton6Seleccionar.setText("Seleccionar");
        boton6Seleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarReactivo(evt);
            }
        });

        javax.swing.GroupLayout jp5ReactivosLayout = new javax.swing.GroupLayout(jp5Reactivos);
        jp5Reactivos.setLayout(jp5ReactivosLayout);
        jp5ReactivosLayout.setHorizontalGroup(
            jp5ReactivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp5ReactivosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp5ReactivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addGroup(jp5ReactivosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(boton6Seleccionar)))
                .addContainerGap())
        );
        jp5ReactivosLayout.setVerticalGroup(
            jp5ReactivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp5ReactivosLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(boton6Seleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        boton7Cancelar.setBackground(new java.awt.Color(255, 255, 255));
        boton7Cancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton7Cancelar.setText("Cancelar");
        boton7Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar(evt);
            }
        });

        javax.swing.GroupLayout jp1ModificarEvaluacionLayout = new javax.swing.GroupLayout(jp1ModificarEvaluacion);
        jp1ModificarEvaluacion.setLayout(jp1ModificarEvaluacionLayout);
        jp1ModificarEvaluacionLayout.setHorizontalGroup(
            jp1ModificarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp1ModificarEvaluacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp1ModificarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp1ModificarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(boton2Guardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(boton1Consultar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                        .addComponent(boton4Salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(boton7Cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp1ModificarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jp2Evaluacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp3ReactivosEvaluacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp4Temas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp5Reactivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        jp1ModificarEvaluacionLayout.setVerticalGroup(
            jp1ModificarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp1ModificarEvaluacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp1ModificarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jp2Evaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jp1ModificarEvaluacionLayout.createSequentialGroup()
                        .addComponent(boton1Consultar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton2Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton7Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton4Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jp3ReactivosEvaluacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jp4Temas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jp5Reactivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jp1ModificarEvaluacion);

        menu1.setBackground(new java.awt.Color(255, 255, 255));

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/mi cuenta.png"))); // NOI18N
        jMenu1.setText("Mi cuenta");
        jMenu1.setToolTipText("");
        menu1.add(jMenu1);

        setJMenuBar(menu1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1056, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //[18] cierra la interfaz
    private void salir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir
        int salir = JOptionPane.showConfirmDialog(rootPane, "SEGURO DESEA SALIR?");
        if (salir == 0) {
            limpiarReactivos();
            cbox1Materia.setEnabled(true);
            cbox2Grado.setEnabled(true);
            boton2Guardar.setEnabled(false);
            boton1Consultar.setEnabled(true);
            cbox3Tema.removeAllItems();
            totalTemas = 0;
            renglon = 0;
            columna = 0;
            cbox1Materia.setSelectedIndex(0);
            cbox2Grado.setSelectedIndex(0);
            vaciarReactivos();
            vaciarReactivosSeleccionados();
            totalReactivosSeleccionados = 0;
            lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);

            this.setVisible(false);

        }

    }//GEN-LAST:event_salir

    //[5] busca y muestra los reactivos relacionados con la materia y grado y nombre de la evaluacion
    private void consultar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultar
        if (materiaSeleccionada && gradoSeleccionado && cbox4Evaluacion.getSelectedIndex() > 0) {
            try {

                nombreEvaluacion = cbox4Evaluacion.getSelectedItem().toString();
                boton1Consultar.setEnabled(false);
                boton2Guardar.setEnabled(true);

                //des-activa los combobox para que no puedan ser manipulados mientras se ven los reactivos
                cbox1Materia.setEnabled(false);
                cbox2Grado.setEnabled(false);
                cbox4Evaluacion.setEnabled(false);

                ControlEvaluacion evaluacion = new ControlEvaluacion();
                ControlReactivo reactivo = new ControlReactivo();
                try {
                    //se obtiene los id de los reactivos involucrados en la evaluacion seleccionada
                    System.out.println("nombre de la evaluacion: " + cbox4Evaluacion.getItemAt(cbox4Evaluacion.getSelectedIndex()).toString());
                    ResultSet contenido = evaluacion.consultarContenido(cbox4Evaluacion.getItemAt(cbox4Evaluacion.getSelectedIndex()).toString());

                    ResultSet resultadoEvaluacion = evaluacion.consultarIdEvaluacion(cbox4Evaluacion.getItemAt(cbox4Evaluacion.getSelectedIndex()).toString());
                    int idEvaluacion = 0;
                    while (resultadoEvaluacion.next()) {
                        idEvaluacion = Integer.parseInt(resultadoEvaluacion.getObject(1).toString());
                    }
                    ResultSet puntuaciones = reactivo.consultarPuntuacion(idEvaluacion);
                    puntuaciones.next();
                    //se obtienen y muestran las redacciones de los reactivos dependiendo 
                    //el id del reactivo que contiene la evaluacion
                    int posicionReactivo = 0;
                    while (contenido.next()) {

                        for (int i = 1; i < 20; i++) {
                            System.out.println("soy: " + i);
                            //guardamos los id de los reactivos en un vector
                            reactivosdeEvaluacion[i - 1] = (int) contenido.getObject(i + 1);
                            //consultamos el contenido del reactivo segun su id
                            ResultSet consultar = reactivo.consultar((int) contenido.getObject(i + 1));

                            consultar.next();
                            //coloca el reactivo y sus respuestas
                            DefaultTableModel modelo = (DefaultTableModel) table1ReactivosEvaluacion.getModel();

                            modelo.addRow(new Object[]{
                                (posicionReactivo + 1),
                                consultar.getObject(1).toString(),
                                consultar.getObject(2).toString(),
                                consultar.getObject(3).toString(),
                                consultar.getObject(4).toString(),
                                Float.parseFloat(puntuaciones.getObject(i + 2).toString())

                            });

                            posicionReactivo++;
                            totalReactivosSeleccionados = posicionReactivo;

                        }
                    }

                } catch (ClassNotFoundException | SQLException ex) {
                    System.out.println(ex);
                }

                //muestra los temas referentes a la materia y el grado en el combobox de materia
                cbox3Tema.removeAllItems();
                cbox3Tema.addItem("Seleccione una opción");
                ControlTema temaC = new ControlTema();
                try {
                    ResultSet resultado = temaC.consultarTemas((cbox1Materia.getSelectedIndex()), (cbox2Grado.getSelectedIndex() + 2));

                    while (resultado.next()) {

                        cbox3Tema.addItem(resultado.getObject(1).toString());

                    }

                } catch (ClassNotFoundException | SQLException ex) {
                    System.out.println(ex);
                }

            } catch (NullPointerException e) {
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "SELECCIONA:\nMateria\nGrado\nEvaluación", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);

    }//GEN-LAST:event_consultar

    public boolean existeCeroenPuntuacion() {
        boolean existe = false;
        try {
            for (int i = 0; i < table1ReactivosEvaluacion.getRowCount(); i++) {
                if (Float.parseFloat(table1ReactivosEvaluacion.getValueAt(i, 5).toString()) == 0) {
                    existe = true;
                }

            }
        } catch (NullPointerException e) {
            existe = true;
        }
        return existe;
    }

    public float[] obtenerPuntajes() {
        existeCeroenPuntuacion();
        float[] puntos = new float[20];
        int i = 0;
        try {
            for (i = 0; i < table1ReactivosEvaluacion.getRowCount(); i++) {
                puntos[i] = Float.parseFloat(table1ReactivosEvaluacion.getValueAt(i, 5).toString());

            }
        } catch (NullPointerException e) {
            for (int x = i; x < table1ReactivosEvaluacion.getRowCount(); x++) {
                puntos[x] = 0;

            }

        }

        return puntos;
    }

    public float calcularPuntuacion() {
        existeCeroenPuntuacion();
        float suma = 0;
        try {
            for (int i = 0; i < table1ReactivosEvaluacion.getRowCount(); i++) {
                suma += Float.parseFloat(table1ReactivosEvaluacion.getValueAt(i, 5).toString());

            }
        } catch (NullPointerException e) {
        }
        lab5PuntuacionTotal.setText("Puntuacion total: #" + suma + " de 10");
        
        return suma;
    }

    //[12] guarda la evaluacion modificada
    private void guardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar
        if (totalReactivosSeleccionados >= 10 && totalReactivosSeleccionados <= 20 && calcularPuntuacion() == 10.0 && existeCeroenPuntuacion() == false) {
            int respuesta = JOptionPane.showConfirmDialog(rootPane, "SEGURO QUIERE MODIFICAR LA EVALUACION?");
            if (respuesta == 0) {

                ControlEvaluacion evaluacion = new ControlEvaluacion();

                try {
                    String materia = null;
                    if (cbox1Materia.getSelectedIndex() == 1) {
                        materia = "Matematicas";
                    } else if (cbox1Materia.getSelectedIndex() == 2) {
                        materia = "Español";
                    }

                    evaluacion.modificar(nombreEvaluacion, reactivosdeEvaluacion, materia, (cbox2Grado.getSelectedIndex() + 2), obtenerPuntajes());
                    JOptionPane.showMessageDialog(rootPane, "EVALUACION MODIFICADA CON EXITO", "FELICIDADES", JOptionPane.WARNING_MESSAGE);

                    limpiarReactivos();
                    vaciarReactivos();
                    cbox1Materia.setEnabled(true);
                    cbox2Grado.setEnabled(true);
                    cbox3Tema.removeAllItems();
                    totalTemas = 0;
                    renglon = 0;
                    columna = 0;
                    cbox1Materia.setSelectedIndex(0);
                    cbox2Grado.setSelectedIndex(0);
                    totalReactivosSeleccionados = 0;
                    lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);
                    vaciarReactivosSeleccionados();
                    boton1Consultar.setEnabled(true);
                    boton2Guardar.setEnabled(false);
                    cbox4Evaluacion.setEnabled(true);
                    cbox4Evaluacion.removeAllItems();
                    cbox4Evaluacion.addItem("Seleccione una opción");
                    cbox3Tema.removeAllItems();
                    cbox3Tema.addItem("Seleccione una opción");

                } catch (SQLException ex) {
                    Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (totalReactivosSeleccionados < 10) {
            JOptionPane.showMessageDialog(rootPane, "SELECCIONA MINIMO 10 REACTIVOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (totalReactivosSeleccionados > 20) {
            JOptionPane.showMessageDialog(rootPane, "SELECCIONA MAXIMO 20 REACTIVOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (calcularPuntuacion() > 10) {
            JOptionPane.showMessageDialog(rootPane, "PUNTAJE TOTAL MAYOR A 10", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (calcularPuntuacion() < 10) {
            JOptionPane.showMessageDialog(rootPane, "PUNTAJE TOTAL MENOR A 10 ", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (existeCeroenPuntuacion()) {
            JOptionPane.showMessageDialog(rootPane, "EXISTE ALMENOS UN REACTIVO SIN PUNTUACION ", "ERROR", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_guardar

    //[16] limpia la tabla donde aparecen los reactivos segun el tema seleccionado
    public void vaciarReactivosSeleccionados() {
        try {

            DefaultTableModel modelo = (DefaultTableModel) table3ReactivosSeleccionados.getModel();
            int total = table3ReactivosSeleccionados.getRowCount();
            for (int i = 0; i < total; i++) {
                modelo.removeRow(0);
            }

        } catch (NumberFormatException e) {
            System.out.println(e.toString());
        }
    }

    //[14] limpia la tabla donde se encuentran los reactivos para generar la evaluacion
    public void vaciarReactivos() {
        for (int i = 0; i < reactivosdeEvaluacion.length; i++) {
            reactivosdeEvaluacion[i] = 0;
        }

        try {

            DefaultTableModel modelo = (DefaultTableModel) table1ReactivosEvaluacion.getModel();
            int total = table1ReactivosEvaluacion.getRowCount();
            for (int i = 0; i < total; i++) {
                modelo.removeRow(0);
            }

        } catch (NumberFormatException e) {
            System.out.println(e.toString());
        }

    }

    //[3] valida si se ha seleccionado el grado
    private void gradogradoSeleccionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradogradoSeleccionado
        if (cbox2Grado.getSelectedIndex() != 0) {
            gradoSeleccionado = true;
        } else {
            gradoSeleccionado = false;
        }
        if (materiaSeleccionada && gradoSeleccionado) {
            try {
                obtenerEvaluaciones();
                //seleccionarEvaluacion();

            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(InterfazAplicarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_gradogradoSeleccionado

    //[2] valida si se ha seleccionado la materia
    private void materiaSeleccionada(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materiaSeleccionada
        if (cbox1Materia.getSelectedIndex() != 0) {
            materiaSeleccionada = true;
        } else {
            materiaSeleccionada = false;
        }
        if (materiaSeleccionada && gradoSeleccionado) {
            try {
                obtenerEvaluaciones();
                //seleccionarEvaluacion();
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(InterfazAplicarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_materiaSeleccionada

    //[6] quita de la tabla el reactivo que se selecciona
    private void removerReactivo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerReactivo
        calcularPuntuacion();
        int totalreactivos = 0;
        int mover[] = new int[table1ReactivosEvaluacion.getRowCount()];
        for (int i = 0; i < table1ReactivosEvaluacion.getRowCount(); i++) {
            String var = String.valueOf(table1ReactivosEvaluacion.getValueAt(i, 6));
            if (var.equalsIgnoreCase("true")) {
                mover[i] = i;
                totalreactivos++;

            } else {
                mover[i] = -1;
            }

        }

        DefaultTableModel modelo = (DefaultTableModel) table1ReactivosEvaluacion.getModel();

        try {
            //comprueba si existe mas de 1 reactivo y comprueba si se ha seleccionado un campo donde no hay reactivo a remover
            if (totalReactivosSeleccionados > 0 && (totalreactivos > 0) && totalreactivos <= totalReactivosSeleccionados) {

                //se pregunta si se quiere remover el reactivo
                int salir = JOptionPane.showConfirmDialog(rootPane, "SEGURO DESEAS REMOVER EL/LOS REACTIVO/S?");
                if (salir == 0) {
                    for (int x = 0; x < mover.length; x++) {
                        while (mover[x] == -1) {
                            x++;
                        }

                        int posicionaEliminar = mover[x];

                        //si la posicion del reactivo a eliminar es el ultimo
                        if ((posicionaEliminar + 1) == totalReactivosSeleccionados) {
                            modelo.removeRow(totalReactivosSeleccionados - 1);

                            reactivosdeEvaluacion[(totalReactivosSeleccionados - 1)] = 0;
                            totalReactivosSeleccionados--;
                        } else {
                            //si la posicion del reactivo a elimina es diferente del ultimo
                            //re ordena la posicion de los reactivos en el contenedor de reactivos
                            for (int i = posicionaEliminar; i < (reactivosdeEvaluacion.length - 1); i++) {
                                reactivosdeEvaluacion[i] = reactivosdeEvaluacion[(i + 1)];

                            }

                            //re ordena la posicion de los elementos en la tabla
                            for (int i = posicionaEliminar; i < (totalReactivosSeleccionados - 1); i++) {
                                //se re asigna el numero a la columna de numero
                                table1ReactivosEvaluacion.setValueAt((i + 1), i, 0);
                                table1ReactivosEvaluacion.setValueAt(table1ReactivosEvaluacion.getValueAt((i + 1), 1).toString(), i, 1);
                                table1ReactivosEvaluacion.setValueAt(table1ReactivosEvaluacion.getValueAt((i + 1), 2).toString(), i, 2);
                                table1ReactivosEvaluacion.setValueAt(table1ReactivosEvaluacion.getValueAt((i + 1), 3).toString(), i, 3);
                                table1ReactivosEvaluacion.setValueAt(table1ReactivosEvaluacion.getValueAt((i + 1), 4).toString(), i, 4);

                            }
                            //asigna a la ultima posicion de la tabla espacios en blanco
                            modelo.removeRow(totalReactivosSeleccionados - 1);

                            totalReactivosSeleccionados--;

                        }

                    }//find el for
                }//fin del if

            } else {
                JOptionPane.showMessageDialog(rootPane, "NO HAY REACTIVOS QUE REMOVER", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("fuera de rango");
        }
        for (int i = 0; i < table1ReactivosEvaluacion.getRowCount(); i++) {
            table1ReactivosEvaluacion.setValueAt(false, i, 6);

        }

        lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);

    }//GEN-LAST:event_removerReactivo

    //[10] muestra los reactivos relacionados con el tema seleccionado
    public void llenarReactivos(ResultSet consultar) throws SQLException {
        limpiarReactivos();
        int posicion = 0;

        DefaultTableModel modelo = (DefaultTableModel) table3ReactivosSeleccionados.getModel();

        while (consultar.next()) {
            modelo.addRow(new Object[]{
                (posicion + 1),
                consultar.getObject(1).toString(),
                consultar.getObject(2).toString(),
                consultar.getObject(3).toString(),
                consultar.getObject(4).toString(),});
            posicion++;
        }

    }

    //[9] limpia todos los campos de la interfaz
    public void limpiarReactivos() {
        // TODO add your handling code here:

        try {

            DefaultTableModel modelo = (DefaultTableModel) table3ReactivosSeleccionados.getModel();
            int total = table3ReactivosSeleccionados.getRowCount();
            for (int i = 0; i < total; i++) {
                modelo.removeRow(0);
            }

        } catch (NumberFormatException e) {
            System.out.println(e.toString());
        }

    }

    //[11] obtener  reactivo
    private void seleccionarReactivo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarReactivo
        calcularPuntuacion();
        int totalreactivos = 0;
        int mover[] = new int[table3ReactivosSeleccionados.getRowCount()];
        for (int i = 0; i < table3ReactivosSeleccionados.getRowCount(); i++) {
            String var = String.valueOf(table3ReactivosSeleccionados.getValueAt(i, 5));
            if (var.equalsIgnoreCase("true")) {
                mover[i] = i;
                totalreactivos++;

            } else {
                mover[i] = -1;
            }

        }

        ControlReactivo reactivo = new ControlReactivo();

        boolean existe = false;

        if ((totalreactivos > 0)) {
            for (int x = 0; x < mover.length; x++) {
                try {
                    while (mover[x] == -1) {
                        x++;
                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                }
                int idReactivo = -1;
                try {
                    idReactivo = reactivo.consultarId(
                            table3ReactivosSeleccionados.getValueAt(mover[x], 1).toString(),
                            table3ReactivosSeleccionados.getValueAt(mover[x], 2).toString(),
                            table3ReactivosSeleccionados.getValueAt(mover[x], 3).toString(),
                            table3ReactivosSeleccionados.getValueAt(mover[x], 4).toString());
                } catch (ClassNotFoundException | SQLException | NullPointerException ex) {
                    Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ArrayIndexOutOfBoundsException ex) {
                    System.out.println("no hay reactivos que selecionar");
                }

                System.out.println("el id del Reactivo es: " + idReactivo);
                if (idReactivo != -1) {
                    for (int i = 0; i < 20; i++) {
                        if (idReactivo == reactivosdeEvaluacion[i]) {
                            existe = true;
                            JOptionPane.showMessageDialog(rootPane, "El REACTIVO: " + (x + 1) + " ESTA REPETIDO", "ERROR", JOptionPane.ERROR_MESSAGE);
                            break;
                        } else {
                            existe = false;
                        }
                    }
                } else {
                    existe = true;
                }//fin del if

                if (existe == false) {
                    reactivosdeEvaluacion[totalReactivosSeleccionados] = idReactivo;
                    totalReactivosSeleccionados++;

                    DefaultTableModel modelo = (DefaultTableModel) table1ReactivosEvaluacion.getModel();
                    try {
                        modelo.addRow(new Object[]{
                            totalReactivosSeleccionados,
                            table3ReactivosSeleccionados.getValueAt(mover[x], 1).toString(),
                            table3ReactivosSeleccionados.getValueAt(mover[x], 2).toString(),
                            table3ReactivosSeleccionados.getValueAt(mover[x], 3).toString(),
                            table3ReactivosSeleccionados.getValueAt(mover[x], 4).toString()
                        });
                    } catch (ArrayIndexOutOfBoundsException e) {
                    }
                }
            }//fin del for
        } else {
            JOptionPane.showMessageDialog(rootPane, "NO HAY REACTIVOS QUE SELECCIONAR", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        for (int i = 0; i < table3ReactivosSeleccionados.getRowCount(); i++) {
            table3ReactivosSeleccionados.setValueAt(false, i, 5);

        }
        lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);
    }//GEN-LAST:event_seleccionarReactivo

    //[1] establece el nombre y el id del usuario
    private void personalizarInterfaz(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_personalizarInterfaz
        jMenu1.setText("Mi cuenta: " + nombre + " : " + idUsuario);
    }//GEN-LAST:event_personalizarInterfaz

    //[17] limpia todos los campos de la interfaz
    private void cancelar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar
        limpiarReactivos();
        cbox1Materia.setEnabled(true);
        cbox2Grado.setEnabled(true);
        boton2Guardar.setEnabled(false);
        boton1Consultar.setEnabled(true);
        cbox4Evaluacion.setEnabled(true);
        totalTemas = 0;
        renglon = 0;
        columna = 0;
        cbox1Materia.setSelectedIndex(0);
        cbox2Grado.setSelectedIndex(0);
        vaciarReactivos();
        vaciarReactivosSeleccionados();
        totalReactivosSeleccionados = 0;
        lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);
        cbox4Evaluacion.removeAllItems();
        cbox4Evaluacion.addItem("Seleccione una opción");
        cbox3Tema.removeAllItems();
        cbox3Tema.addItem("Seleccione una opción");
    }//GEN-LAST:event_cancelar

    private void buscarTemas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarTemas
        ControlReactivo reactivo = new ControlReactivo();

        try {
            limpiarReactivos();

            ResultSet consultar = reactivo.consultarReactivos(cbox1Materia.getSelectedIndex(), cbox3Tema.getSelectedItem().toString(), (cbox2Grado.getSelectedIndex() + 2));

            llenarReactivos(consultar);
        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {
            System.out.println(e);
            limpiarReactivos();
        } catch (ClassNotFoundException | SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_buscarTemas

    public void limpiarCampos() {

        cbox1Materia.removeAllItems();
        cbox1Materia.addItem("Seleccione una opción");

        cbox2Grado.removeAllItems();
        cbox2Grado.addItem("Seleccione una opción");

        cbox4Evaluacion.removeAllItems();
        cbox4Evaluacion.addItem("Seleccione una opción");

        cbox3Tema.removeAllItems();
        cbox3Tema.addItem("Seleccione una opción");
        limpiarReactivos();
        vaciarReactivosSeleccionados();

    }


    private void buscarMaterias(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buscarMaterias
        // TODO add your handling code here:

        limpiarCampos();
        ControlMateria cMateria = new ControlMateria();
        try {
            ResultSet obtenerMaterias = cMateria.obtenerMaterias();

            while (obtenerMaterias.next()) {
                cbox1Materia.addItem(obtenerMaterias.getObject(1));
            }

        } catch (ClassNotFoundException | SQLException ex) {
            System.out.println(ex);
        }


    }//GEN-LAST:event_buscarMaterias

    private void buscarGrados(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buscarGrados
        // TODO add your handling code here:
        ControlGrupo Cgrupo = new ControlGrupo();
        try {
            ResultSet obtenerGrados = Cgrupo.obtenerGrupos();

            String grado = "";

            while (obtenerGrados.next()) {
                grado = obtenerGrados.getObject(1).toString();
                int totalGrado = cbox2Grado.getItemCount();
                int maximo = 0;

                for (int i = 0; i < totalGrado; i++) {
                    if (grado.compareTo(cbox2Grado.getItemAt(i).toString()) == 0) {
                        maximo++;

                    }
                }
                if (maximo == 0) {
                    this.cbox2Grado.addItem(grado);
                }

            }

        } catch (ClassNotFoundException | SQLException ex) {
            System.out.println("Error al intentar obtener datos a la bd");
        }

    }//GEN-LAST:event_buscarGrados

    private void calcularPuntuacion(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calcularPuntuacion
        // TODO add your handling code here:
        calcularPuntuacion();
    }//GEN-LAST:event_calcularPuntuacion

    //[4] consulta y muestra los nombres de las evaluaciones que coincidan con el grado materia
    public void obtenerEvaluaciones() throws ClassNotFoundException, SQLException {
        ControlEvaluacion evaluacion = new ControlEvaluacion();
        ResultSet resultadoConsulta = evaluacion.consultarNombreEvaluacion(cbox1Materia.getSelectedIndex(), (cbox2Grado.getSelectedIndex() + 2));
        cbox4Evaluacion.removeAllItems();
        cbox4Evaluacion.addItem("Seleccione una opción");
        while (resultadoConsulta.next()) {
            cbox4Evaluacion.addItem(resultadoConsulta.getObject(1));

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazModificarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazModificarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazModificarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazModificarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazModificarEvaluacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton1Consultar;
    private javax.swing.JButton boton2Guardar;
    private javax.swing.JButton boton4Salir;
    private javax.swing.JButton boton5RemoverReactivo;
    private javax.swing.JButton boton6Seleccionar;
    private javax.swing.JButton boton7Cancelar;
    private javax.swing.JComboBox cbox1Materia;
    private javax.swing.JComboBox cbox2Grado;
    private javax.swing.JComboBox cbox3Tema;
    private javax.swing.JComboBox cbox4Evaluacion;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel jp1ModificarEvaluacion;
    private javax.swing.JPanel jp2Evaluacion;
    private javax.swing.JPanel jp3ReactivosEvaluacion;
    private javax.swing.JPanel jp4Temas;
    private javax.swing.JPanel jp5Reactivos;
    private javax.swing.JLabel lab1TotalReactivos;
    private javax.swing.JLabel lab2Grado;
    private javax.swing.JLabel lab3Evaluacion;
    private javax.swing.JLabel lab4Tema;
    private javax.swing.JLabel lab5Materia;
    private javax.swing.JLabel lab5PuntuacionTotal;
    private javax.swing.JMenuBar menu1;
    private javax.swing.JTable table1ReactivosEvaluacion;
    private javax.swing.JTable table3ReactivosSeleccionados;
    // End of variables declaration//GEN-END:variables
}
