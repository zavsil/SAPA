/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PaqueteMantenimientodeEvaluaciones;

import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author FRANCISCO ZAVALA SILVA
 */
public class InterfazGenerarEvaluacion extends javax.swing.JFrame {

    boolean materiaSeleccionada = false;
    boolean gradoSeleccionado = false;
    int totalReactivosActuales = 0;
    int totalReactivosSeleccionados = 0;
    public int idUsuario;
    public String nombre;
    int reactivosdeEvaluacion[] = new int[20];
    int totalTemas = 0;
    int renglon = 0;
    int columna = 0;

    /**
     * Creates new form InterfazEvaluaciones
     */
    public InterfazGenerarEvaluacion() {
        initComponents();

        //establece la interfaz en posicion central 
        this.setLocationRelativeTo(null);

        //coloca el icono en la interfaz
        setIconImage(new ImageIcon(getClass().getResource("/imagenes/icono.png")).getImage());
        //limpia los campos
        vaciarReactivos();
        //desactiva el maximizar
        this.setResizable(false);
        //desactiva la opcion cerrar
        setDefaultCloseOperation(0);
        //desactiva el boton general
        boton1Generar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        jp1GenerarEvaluacion = new javax.swing.JPanel();
        jp2InformacionReactivo = new javax.swing.JPanel();
        lab2Materia = new javax.swing.JLabel();
        lab3Grado = new javax.swing.JLabel();
        cbox1Materia = new javax.swing.JComboBox();
        cbox2Grado = new javax.swing.JComboBox();
        boton1Generar = new javax.swing.JButton();
        boton3Salir = new javax.swing.JButton();
        jp4Reactivos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table2Reactivos = new javax.swing.JTable();
        boton6Seleccionar = new javax.swing.JButton();
        jp3Temas = new javax.swing.JPanel();
        lab4Tema = new javax.swing.JLabel();
        cbox3Tema = new javax.swing.JComboBox();
        boton2Cancelar = new javax.swing.JButton();
        jp5ReactivosSeleccionados = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        table3ReactivosSeleccionados = new javax.swing.JTable();
        boton5RemoverReactivo = new javax.swing.JButton();
        lab1TotalReactivos = new javax.swing.JLabel();
        lab5PuntuacionTotal = new javax.swing.JLabel();
        menu1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mantenimiento de evaluaciones/Generar Evaluación");
        setMinimumSize(new java.awt.Dimension(1000, 546));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                personalizarInterfaz(evt);
            }
        });

        jScrollPane4.setBackground(new java.awt.Color(245, 245, 239));
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jp1GenerarEvaluacion.setBackground(new java.awt.Color(245, 245, 239));
        jp1GenerarEvaluacion.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jp2InformacionReactivo.setBackground(new java.awt.Color(253, 251, 251));
        jp2InformacionReactivo.setBorder(javax.swing.BorderFactory.createTitledBorder("Información del reactivo"));

        lab2Materia.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab2Materia.setText("Materia:");

        lab3Grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab3Grado.setText("Grado:");

        cbox1Materia.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbox1Materia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una opción", "Matemáticas", "Español" }));
        cbox1Materia.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                buscarMaterias(evt);
            }
        });
        cbox1Materia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                materiaSeleccionada(evt);
            }
        });

        cbox2Grado.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbox2Grado.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una opción", "3", "4", "5", "6" }));
        cbox2Grado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                obtenerGrados(evt);
            }
        });
        cbox2Grado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradoSeleccionado(evt);
            }
        });

        javax.swing.GroupLayout jp2InformacionReactivoLayout = new javax.swing.GroupLayout(jp2InformacionReactivo);
        jp2InformacionReactivo.setLayout(jp2InformacionReactivoLayout);
        jp2InformacionReactivoLayout.setHorizontalGroup(
            jp2InformacionReactivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp2InformacionReactivoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp2InformacionReactivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lab2Materia)
                    .addComponent(lab3Grado))
                .addGap(18, 18, 18)
                .addGroup(jp2InformacionReactivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbox1Materia, 0, 174, Short.MAX_VALUE)
                    .addComponent(cbox2Grado, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(537, Short.MAX_VALUE))
        );
        jp2InformacionReactivoLayout.setVerticalGroup(
            jp2InformacionReactivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp2InformacionReactivoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp2InformacionReactivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab2Materia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbox1Materia, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jp2InformacionReactivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab3Grado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbox2Grado, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        boton1Generar.setBackground(new java.awt.Color(51, 204, 0));
        boton1Generar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton1Generar.setText("Generar y guardar");
        boton1Generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarEvaluacion(evt);
            }
        });

        boton3Salir.setBackground(new java.awt.Color(255, 255, 255));
        boton3Salir.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton3Salir.setText("Salir");
        boton3Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salir(evt);
            }
        });

        jp4Reactivos.setBackground(new java.awt.Color(253, 251, 251));
        jp4Reactivos.setBorder(javax.swing.BorderFactory.createTitledBorder("seleccione los reactivos deseados"));

        table2Reactivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de lista", "Descripción del reactivo", "Respuesta correcta", "Respuesta Incorrecta 1", "Respuesta Incorrecta 2", "Check"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table2Reactivos);

        boton6Seleccionar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton6Seleccionar.setText("Seleccionar");
        boton6Seleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarReactivo(evt);
            }
        });

        javax.swing.GroupLayout jp4ReactivosLayout = new javax.swing.GroupLayout(jp4Reactivos);
        jp4Reactivos.setLayout(jp4ReactivosLayout);
        jp4ReactivosLayout.setHorizontalGroup(
            jp4ReactivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp4ReactivosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp4ReactivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addGroup(jp4ReactivosLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(boton6Seleccionar)))
                .addContainerGap())
        );
        jp4ReactivosLayout.setVerticalGroup(
            jp4ReactivosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp4ReactivosLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 22, Short.MAX_VALUE)
                .addComponent(boton6Seleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jp3Temas.setBackground(new java.awt.Color(253, 251, 251));
        jp3Temas.setBorder(javax.swing.BorderFactory.createTitledBorder("Temas agregados"));

        lab4Tema.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab4Tema.setText("Tema:");

        cbox3Tema.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbox3Tema.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione una opción" }));
        cbox3Tema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarReactivos(evt);
            }
        });

        javax.swing.GroupLayout jp3TemasLayout = new javax.swing.GroupLayout(jp3Temas);
        jp3Temas.setLayout(jp3TemasLayout);
        jp3TemasLayout.setHorizontalGroup(
            jp3TemasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp3TemasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lab4Tema)
                .addGap(30, 30, 30)
                .addComponent(cbox3Tema, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jp3TemasLayout.setVerticalGroup(
            jp3TemasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp3TemasLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jp3TemasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab4Tema, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbox3Tema, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(135, 135, 135))
        );

        boton2Cancelar.setBackground(new java.awt.Color(255, 255, 255));
        boton2Cancelar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton2Cancelar.setText("Cancelar");
        boton2Cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelar(evt);
            }
        });

        jp5ReactivosSeleccionados.setBackground(new java.awt.Color(253, 251, 251));
        jp5ReactivosSeleccionados.setBorder(javax.swing.BorderFactory.createTitledBorder("Reactivos seleccionados [10-20]"));

        table3ReactivosSeleccionados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de lista", "Descripción del reactivo", "Respuesta correcta", "Respuesta Incorrecta 1", "Respuesta Incorrecta 2", "Puntaje", "Check"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Float.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table3ReactivosSeleccionados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                calcularPuntuacion(evt);
            }
        });
        jScrollPane3.setViewportView(table3ReactivosSeleccionados);

        boton5RemoverReactivo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        boton5RemoverReactivo.setText("Remover reactivo");
        boton5RemoverReactivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerReactivo(evt);
            }
        });

        lab1TotalReactivos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab1TotalReactivos.setText("Reactivos seleccionados: #0");

        lab5PuntuacionTotal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lab5PuntuacionTotal.setText("Puntuacion total: #0");

        javax.swing.GroupLayout jp5ReactivosSeleccionadosLayout = new javax.swing.GroupLayout(jp5ReactivosSeleccionados);
        jp5ReactivosSeleccionados.setLayout(jp5ReactivosSeleccionadosLayout);
        jp5ReactivosSeleccionadosLayout.setHorizontalGroup(
            jp5ReactivosSeleccionadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp5ReactivosSeleccionadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp5ReactivosSeleccionadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 769, Short.MAX_VALUE)
                    .addGroup(jp5ReactivosSeleccionadosLayout.createSequentialGroup()
                        .addComponent(lab1TotalReactivos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(boton5RemoverReactivo))
                    .addGroup(jp5ReactivosSeleccionadosLayout.createSequentialGroup()
                        .addComponent(lab5PuntuacionTotal)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jp5ReactivosSeleccionadosLayout.setVerticalGroup(
            jp5ReactivosSeleccionadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp5ReactivosSeleccionadosLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp5ReactivosSeleccionadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boton5RemoverReactivo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lab1TotalReactivos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(lab5PuntuacionTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jp1GenerarEvaluacionLayout = new javax.swing.GroupLayout(jp1GenerarEvaluacion);
        jp1GenerarEvaluacion.setLayout(jp1GenerarEvaluacionLayout);
        jp1GenerarEvaluacionLayout.setHorizontalGroup(
            jp1GenerarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp1GenerarEvaluacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jp1GenerarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(boton3Salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boton2Cancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boton1Generar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 11, Short.MAX_VALUE)
                .addGroup(jp1GenerarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jp4Reactivos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp3Temas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp2InformacionReactivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jp5ReactivosSeleccionados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jp1GenerarEvaluacionLayout.setVerticalGroup(
            jp1GenerarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp1GenerarEvaluacionLayout.createSequentialGroup()
                .addGroup(jp1GenerarEvaluacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp1GenerarEvaluacionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jp2InformacionReactivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jp3Temas, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jp4Reactivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jp1GenerarEvaluacionLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(boton1Generar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(boton2Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(boton3Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp5ReactivosSeleccionados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(103, Short.MAX_VALUE))
        );

        jScrollPane4.setViewportView(jp1GenerarEvaluacion);

        menu1.setBackground(new java.awt.Color(255, 255, 255));

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/mi cuenta.png"))); // NOI18N
        jMenu1.setText("Mi cuenta");
        jMenu1.setToolTipText("");
        menu1.add(jMenu1);

        setJMenuBar(menu1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //[16] cierra la interfaz
    private void salir(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salir
        System.out.println("Mi cuenta: " + nombre + " : " + idUsuario);
        int salir = JOptionPane.showConfirmDialog(rootPane, "SEGURO DESEA SALIR?");
        if (salir == 0) {
            limpiarReactivos();
            vaciarReactivosSeleccionados();
            cbox1Materia.setEnabled(true);
            cbox2Grado.setEnabled(true);
            cbox3Tema.removeAllItems();
            totalTemas = 0;
            renglon = 0;
            columna = 0;
            cbox1Materia.setSelectedIndex(0);
            cbox2Grado.setSelectedIndex(0);
            totalReactivosActuales = 0;
            totalReactivosSeleccionados = 0;
            lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);
            vaciarReactivos();
            this.setVisible(false);

        }
    }//GEN-LAST:event_salir

    //[14] limpia los campos de la interfaz
    private void cancelar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelar
        limpiarReactivos();
        vaciarReactivosSeleccionados();
        cbox1Materia.setEnabled(true);
        cbox2Grado.setEnabled(true);
        cbox3Tema.removeAllItems();
        cbox3Tema.addItem("Seleccione una opción");
        totalTemas = 0;
        renglon = 0;
        columna = 0;
        cbox1Materia.setSelectedIndex(0);
        cbox2Grado.setSelectedIndex(0);
        totalReactivosActuales = 0;
        totalReactivosSeleccionados = 0;
        lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);
        vaciarReactivos();
        boton1Generar.setEnabled(false);
    }//GEN-LAST:event_cancelar

    //[2] asigna 0 al vector donde se van almacenando los reactivos almacenados
    public void vaciarReactivos() {
        for (int i = 0; i < reactivosdeEvaluacion.length; i++) {
            reactivosdeEvaluacion[i] = 0;
        }
    }

    //[12] quita los reactivos seleccionados que se encuentran en la tabla
    public void vaciarReactivosSeleccionados() {
        try {

            DefaultTableModel modelo = (DefaultTableModel) table3ReactivosSeleccionados.getModel();
            int total = table3ReactivosSeleccionados.getRowCount();
            for (int i = 0; i < total; i++) {
                modelo.removeRow(0);
            }
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
        }
    }

    //[3] verifica si se ha seleccionado la materia
    private void materiaSeleccionada(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_materiaSeleccionada
        cbox3Tema.removeAllItems();
        cbox3Tema.addItem("Seleccione una opción");
        if (cbox1Materia.getSelectedIndex() != 0) {
            materiaSeleccionada = true;
            obtenerTemas();

        } else {
            materiaSeleccionada = false;
        }
    }//GEN-LAST:event_materiaSeleccionada

    //[4] verifica si se ha seleccionado el grado
    private void gradoSeleccionado(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradoSeleccionado
        cbox3Tema.removeAllItems();
        cbox3Tema.addItem("Seleccione una opción");
        if (cbox2Grado.getSelectedIndex() != 0) {
            gradoSeleccionado = true;
            obtenerTemas();

        } else {
            gradoSeleccionado = false;
        }
    }//GEN-LAST:event_gradoSeleccionado

    //[15] limpia los reactivos de la tabla
    public void limpiarReactivos() {
        try {

            DefaultTableModel modelo = (DefaultTableModel) table2Reactivos.getModel();
            int total = table2Reactivos.getRowCount();
            for (int i = 0; i < total; i++) {
                modelo.removeRow(0);
            }
        } catch (NumberFormatException e) {
            System.out.println(e.toString());
        }

    }

    //[9] obtiene y muestra los reactivos seleccionados
    private void seleccionarReactivo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarReactivo
        calcularPuntuacion();

        int totalreactivos = 0;
        int mover[] = new int[table2Reactivos.getRowCount()];
        for (int i = 0; i < table2Reactivos.getRowCount(); i++) {
            String var = String.valueOf(table2Reactivos.getValueAt(i, 5));
            if (var.equalsIgnoreCase("true")) {
                mover[i] = i;
                totalreactivos++;

            } else {
                mover[i] = -1;
            }

        }

        ControlReactivo reactivo = new ControlReactivo();
        boolean existe = false;

        if (totalReactivosActuales > 0 && (totalreactivos > 0) && (totalreactivos <= totalReactivosActuales)) {
            for (int x = 0; x < mover.length; x++) {
                System.out.println("pos: " + mover[x]);
                try {
                    while (mover[x] == -1) {
                        x++;

                    }
                } catch (ArrayIndexOutOfBoundsException e) {
                }

                boton1Generar.setEnabled(true);
                int idReactivo = -1;
                try {
                    idReactivo = reactivo.consultarId(
                            table2Reactivos.getValueAt(mover[x], 1).toString(),
                            table2Reactivos.getValueAt(mover[x], 2).toString(),
                            table2Reactivos.getValueAt(mover[x], 3).toString(),
                            table2Reactivos.getValueAt(mover[x], 4).toString());
                } catch (ClassNotFoundException | SQLException | NullPointerException ex) {
                    Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ArrayIndexOutOfBoundsException ex) {
                    System.out.println("no hay reactivos que selecionar");
                }

                System.out.println("el id del Reactivo es: " + idReactivo);
                if (idReactivo != -1) {
                    for (int i = 0; i < 20; i++) {
                        if (idReactivo == reactivosdeEvaluacion[i]) {
                            existe = true;
                            JOptionPane.showMessageDialog(rootPane, "El REACTIVO: " + (x + 1) + " ESTA REPETIDO", "ERROR", JOptionPane.ERROR_MESSAGE);
                            break;
                        } else {
                            existe = false;
                        }
                    }
                } else {
                    existe = true;
                }//fin del if
                if (existe == false) {
                    reactivosdeEvaluacion[totalReactivosSeleccionados] = idReactivo;
                    totalReactivosSeleccionados++;

                    DefaultTableModel modelo = (DefaultTableModel) table3ReactivosSeleccionados.getModel();
                    try {
                        modelo.addRow(new Object[]{
                            totalReactivosSeleccionados,
                            table2Reactivos.getValueAt(mover[x], 1).toString(),
                            table2Reactivos.getValueAt(mover[x], 2).toString(),
                            table2Reactivos.getValueAt(mover[x], 3).toString(),
                            table2Reactivos.getValueAt(mover[x], 4).toString()
                        });
                    } catch (ArrayIndexOutOfBoundsException e) {
                    }
                }
            }//fin del for

        } else {
            boton1Generar.setEnabled(false);
            JOptionPane.showMessageDialog(rootPane, "NO HAY REACTIVOS QUE SELECCIONAR", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        for (int i = 0; i < table2Reactivos.getRowCount(); i++) {
            table2Reactivos.setValueAt(false, i, 5);

        }

        lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);
    }//GEN-LAST:event_seleccionarReactivo

    public boolean existeCeroenPuntuacion() {
        boolean existe = false;
        try {
            for (int i = 0; i < table3ReactivosSeleccionados.getRowCount(); i++) {
                if (Float.parseFloat(table3ReactivosSeleccionados.getValueAt(i, 5).toString()) == 0) {
                    existe = true;
                }

            }
        } catch (NullPointerException e) {
            existe = true;
        }
        return existe;
    }

    public float[] obtenerPuntajes() {
        existeCeroenPuntuacion();
        float[] puntos = new float[20];
        int i = 0;
        try {
            for (i = 0; i < table3ReactivosSeleccionados.getRowCount(); i++) {
                puntos[i] = Float.parseFloat(table3ReactivosSeleccionados.getValueAt(i, 5).toString());

            }
        } catch (NullPointerException e) {
            for (int x = i; x < table3ReactivosSeleccionados.getRowCount(); x++) {
                puntos[x] = 0;

            }

        }

        return puntos;
    }

    public float calcularPuntuacion() {
        existeCeroenPuntuacion();
        float suma = 0;
        try {
            for (int i = 0; i < table3ReactivosSeleccionados.getRowCount(); i++) {
                suma += Float.parseFloat(table3ReactivosSeleccionados.getValueAt(i, 5).toString());

            }
        } catch (NullPointerException e) {
        }
        lab5PuntuacionTotal.setText("Puntuacion total: #" + suma + " de 10");
        return suma;
    }

    //[11] permite generar una evaluacion
    private void generarEvaluacion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarEvaluacion
        if (totalReactivosSeleccionados >= 10 && totalReactivosSeleccionados <= 20 && calcularPuntuacion() == 10.0 && existeCeroenPuntuacion() == false) {

            int respuesta = JOptionPane.showConfirmDialog(rootPane, "SEGURO QUIERE GENERAR LA EVALUACION?");
            if (respuesta == 0) {
                ControlEvaluacion evaluacion = new ControlEvaluacion();

                try {

                    ResultSet consultarIdMateriadeEvaluacion = evaluacion.consultarIdMateriadeEvaluacion(cbox1Materia.getSelectedItem().toString());
                    int idMateria = 0;
                    while (consultarIdMateriadeEvaluacion.next()) {
                        idMateria = Integer.parseInt(consultarIdMateriadeEvaluacion.getObject(1).toString());
                    }

                    evaluacion.registrar(idUsuario, reactivosdeEvaluacion, idMateria, cbox1Materia.getSelectedItem().toString(), (cbox2Grado.getSelectedIndex() + 2), obtenerPuntajes());

                    JOptionPane.showMessageDialog(rootPane, "EVALUACION GENERADA CON EXITO", "FELICIDADES", JOptionPane.WARNING_MESSAGE);

                    limpiarReactivos();
                    vaciarReactivosSeleccionados();
                    cbox1Materia.setEnabled(true);
                    cbox2Grado.setEnabled(true);
                    cbox3Tema.removeAllItems();
                    totalTemas = 0;
                    renglon = 0;
                    columna = 0;
                    cbox1Materia.setSelectedIndex(0);
                    cbox2Grado.setSelectedIndex(0);
                    totalReactivosActuales = 0;
                    totalReactivosSeleccionados = 0;
                    lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);
                    lab5PuntuacionTotal.setText("Puntuacion total: #0 de 10");
                    vaciarReactivos();

                } catch (SQLException ex) {
                    Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else if (totalReactivosSeleccionados < 10) {
            JOptionPane.showMessageDialog(rootPane, "SELECCIONA MINIMO 10 REACTIVOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (totalReactivosSeleccionados > 20) {
            JOptionPane.showMessageDialog(rootPane, "SELECCIONA MAXIMO 20 REACTIVOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (calcularPuntuacion() > 10) {
            JOptionPane.showMessageDialog(rootPane, "PUNTAJE TOTAL MAYOR A 10", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (calcularPuntuacion() < 10) {
            JOptionPane.showMessageDialog(rootPane, "PUNTAJE TOTAL MENOR A 10 ", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if (existeCeroenPuntuacion()) {
            JOptionPane.showMessageDialog(rootPane, "EXISTE ALMENOS UN REACTIVO SIN PUNTUACION ", "ERROR", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_generarEvaluacion

    //[1] asigna el nombre y el id del usuario en la interfaz
    private void personalizarInterfaz(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_personalizarInterfaz
        jMenu1.setText("Mi cuenta: " + nombre + " : " + idUsuario);
    }//GEN-LAST:event_personalizarInterfaz

    //[10] quita un reactivo seleccionado de la tabla
    private void removerReactivo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerReactivo
        calcularPuntuacion();

        int totalreactivos = 0;
        int mover[] = new int[table3ReactivosSeleccionados.getRowCount()];
        for (int i = 0; i < table3ReactivosSeleccionados.getRowCount(); i++) {
            String var = String.valueOf(table3ReactivosSeleccionados.getValueAt(i, 6));
            if (var.equalsIgnoreCase("true")) {
                mover[i] = i;
                totalreactivos++;

            } else {
                mover[i] = -1;
            }

        }

        DefaultTableModel modelo = (DefaultTableModel) table3ReactivosSeleccionados.getModel();

        try {
            //comprueba si existe mas de 1 reactivo y comprueba si se ha seleccionado un campo donde no hay reactivo a remover
            if (totalReactivosSeleccionados > 0 && (totalreactivos > 0) && totalreactivos <= totalReactivosSeleccionados) {
                //se pregunta si se quiere remover el reactivo
                int salir = JOptionPane.showConfirmDialog(rootPane, "SEGURO DESEAS REMOVER EL/LOS REACTIVO/S?");
                if (salir == 0) {
                    for (int x = 0; x < mover.length; x++) {
                        while (mover[x] == -1) {
                            x++;
                        }

                        int posicionaEliminar = mover[x];

                        if ((posicionaEliminar + 1) == totalReactivosSeleccionados) {
                            modelo.removeRow(totalReactivosSeleccionados - 1);
                            reactivosdeEvaluacion[(totalReactivosSeleccionados - 1)] = 0;
                            totalReactivosSeleccionados--;

                        } else {

                            //re ordena la posicion de los reactivos en el contenedor de reactivos
                            for (int i = posicionaEliminar; i < (reactivosdeEvaluacion.length - 1); i++) {
                                reactivosdeEvaluacion[i] = reactivosdeEvaluacion[(i + 1)];

                            }

                            //re ordena la posicion de los elementos en la tabla
                            for (int i = posicionaEliminar; i < (totalReactivosSeleccionados - 1); i++) {
                                //se re asigna el numero a la columna de numero
                                table3ReactivosSeleccionados.setValueAt((i + 1), i, 0);
                                table3ReactivosSeleccionados.setValueAt(table3ReactivosSeleccionados.getValueAt((i + 1), 1).toString(), i, 1);
                                table3ReactivosSeleccionados.setValueAt(table3ReactivosSeleccionados.getValueAt((i + 1), 2).toString(), i, 2);
                                table3ReactivosSeleccionados.setValueAt(table3ReactivosSeleccionados.getValueAt((i + 1), 3).toString(), i, 3);
                                table3ReactivosSeleccionados.setValueAt(table3ReactivosSeleccionados.getValueAt((i + 1), 4).toString(), i, 4);

                            }
                            //asigna a la ultima posicion de la tabla espacios en blanco
                            modelo.removeRow(totalReactivosSeleccionados - 1);
                            totalReactivosSeleccionados--;
                        }

                        //des activa el boton generar evalaucion ya que no habra reactivos seleccionados
                        if (totalReactivosSeleccionados == 0) {
                            boton1Generar.setEnabled(false);

                        }

                    }//fin del for
                }//FIN DEL IF
            } else {
                JOptionPane.showMessageDialog(rootPane, "NO HAY REACTIVOS QUE REMOVER", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (ArrayIndexOutOfBoundsException e) {
        }

        for (int i = 0; i < table3ReactivosSeleccionados.getRowCount(); i++) {
            table3ReactivosSeleccionados.setValueAt(false, i, 6);

        }
        lab1TotalReactivos.setText("Reactivos seleccionados: #" + totalReactivosSeleccionados);


    }//GEN-LAST:event_removerReactivo
//[7] se obtienen los reactivos segun la materia tema y grado
    private void buscarReactivos(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarReactivos
        ControlReactivo reactivo = new ControlReactivo();

        try {
            limpiarReactivos();

            ResultSet consultar = reactivo.consultarReactivos(cbox1Materia.getSelectedIndex(), cbox3Tema.getSelectedItem().toString(), (cbox2Grado.getSelectedIndex() + 2));

            llenarReactivos(consultar);
        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {
            System.out.println(e);
            limpiarReactivos();
        } catch (ClassNotFoundException | SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_buscarReactivos

    public void limpiarCampos() {

        cbox1Materia.removeAllItems();
        cbox1Materia.addItem("Seleccione una opción");

        cbox2Grado.removeAllItems();
        cbox2Grado.addItem("Seleccione una opción");

        cbox3Tema.removeAllItems();
        cbox3Tema.addItem("Seleccione una opción");
        limpiarReactivos();
        vaciarReactivosSeleccionados();

    }

    private void buscarMaterias(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_buscarMaterias
        // TODO add your handling code here:
        limpiarCampos();
        ControlMateria cMateria = new ControlMateria();
        try {
            ResultSet obtenerMaterias = cMateria.obtenerMaterias();

            while (obtenerMaterias.next()) {
                cbox1Materia.addItem(obtenerMaterias.getObject(1));
            }

        } catch (ClassNotFoundException | SQLException ex) {
            System.out.println(ex);
        }


    }//GEN-LAST:event_buscarMaterias

    private void obtenerGrados(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_obtenerGrados
        // TODO add your handling code here:

        ControlGrupo Cgrupo = new ControlGrupo();
        try {
            ResultSet obtenerGrados = Cgrupo.obtenerGrupos();

            String grado = "";

            while (obtenerGrados.next()) {
                grado = obtenerGrados.getObject(1).toString();
                int totalGrado = cbox2Grado.getItemCount();
                int maximo = 0;

                for (int i = 0; i < totalGrado; i++) {
                    if (grado.compareTo(cbox2Grado.getItemAt(i).toString()) == 0) {
                        maximo++;

                    }
                }
                if (maximo == 0) {
                    this.cbox2Grado.addItem(grado);
                }

            }

        } catch (ClassNotFoundException | SQLException ex) {
            System.out.println("Error al intentar obtener datos a la bd");
        }
    }//GEN-LAST:event_obtenerGrados

    private void calcularPuntuacion(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_calcularPuntuacion
        // TODO add your handling code here:
        calcularPuntuacion();
    }//GEN-LAST:event_calcularPuntuacion

    //[8] llena los reactivos en la tabla
    public void llenarReactivos(ResultSet consultar) throws SQLException {
        limpiarReactivos();
        int posicion = 0;

        DefaultTableModel modelo = (DefaultTableModel) table2Reactivos.getModel();

        while (consultar.next()) {
            modelo.addRow(new Object[]{
                (posicion + 1),
                consultar.getObject(1).toString(),
                consultar.getObject(2).toString(),
                consultar.getObject(3).toString(),
                consultar.getObject(4).toString()
            });

            posicion++;

        }

        totalReactivosActuales = posicion;

    }

    //[5] obtiene y muestra los temas relacionados con la materia y grado
    public void obtenerTemas() {

        cbox3Tema.removeAllItems();
        cbox3Tema.addItem("Seleccione una opción");

        ControlTema tema = new ControlTema();
        if (materiaSeleccionada && gradoSeleccionado) {
            try {

                ResultSet resultado = tema.consultarTemas((cbox1Materia.getSelectedIndex()), (cbox2Grado.getSelectedIndex() + 2));
                while (resultado.next()) {
                    cbox3Tema.addItem(resultado.getObject(1));
                }

            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazGenerarEvaluacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazGenerarEvaluacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton1Generar;
    private javax.swing.JButton boton2Cancelar;
    private javax.swing.JButton boton3Salir;
    private javax.swing.JButton boton5RemoverReactivo;
    private javax.swing.JButton boton6Seleccionar;
    private javax.swing.JComboBox cbox1Materia;
    private javax.swing.JComboBox cbox2Grado;
    private javax.swing.JComboBox cbox3Tema;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel jp1GenerarEvaluacion;
    private javax.swing.JPanel jp2InformacionReactivo;
    private javax.swing.JPanel jp3Temas;
    private javax.swing.JPanel jp4Reactivos;
    private javax.swing.JPanel jp5ReactivosSeleccionados;
    private javax.swing.JLabel lab1TotalReactivos;
    private javax.swing.JLabel lab2Materia;
    private javax.swing.JLabel lab3Grado;
    private javax.swing.JLabel lab4Tema;
    private javax.swing.JLabel lab5PuntuacionTotal;
    private javax.swing.JMenuBar menu1;
    private javax.swing.JTable table2Reactivos;
    private javax.swing.JTable table3ReactivosSeleccionados;
    // End of variables declaration//GEN-END:variables
}
